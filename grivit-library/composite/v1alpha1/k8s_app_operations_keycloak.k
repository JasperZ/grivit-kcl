import core.v1alpha1 as core

schema K8sAppOperationsKeycloak:
    _adminPassword: str
    _controlPlaneK8sProviderConfigName: str
    _domain: str
    _fluxHelmReleaseDependencies?: [core.K8sFluxHelmReleaseWrapper | core.K8sFluxHelmOciReleaseWrapper] = []
    _name: str
    _targetK8sProviderConfigWrapper: core.K8sProviderConfigWrapper
    _tenantNamespace: str

    repo: core.K8sFluxOciRepositoryWrapper {
        _name = "${_name}-repo"
        _url = "oci://registry-1.docker.io/bitnamicharts/keycloak"
        _tag = "24.2.2"
        _controlPlaneK8sProviderConfigName = _controlPlaneK8sProviderConfigName
        _tenantNamespace = _tenantNamespace
    }
    release: core.K8sFluxHelmOciReleaseWrapper {
        _name = "${_name}-rel"
        _helmReleaseName = "keycloak"
        _helmReleaseNamespace = "keycloak"
        _helmOciRepositoryWrapper = repo
        _helmReleaseWrapperDependencies = _fluxHelmReleaseDependencies
        _targetK8sProviderConfigWrapper = _targetK8sProviderConfigWrapper
        _controlPlaneK8sProviderConfigName = _controlPlaneK8sProviderConfigName
        _tenantNamespace = _tenantNamespace
        managedResource.spec.forProvider.manifest.spec.values = {
            auth = {
                adminUser = "admin"
                adminPassword = _adminPassword
            }
            production = True
            ingress = {
                enabled = True
                ingressClassName = "nginx"
                hostname = _domain
                annotations = {
                    "cert-manager.io/cluster-issuer" = "letsencrypt"
                }
                tls = True
            }
            tls = {
                enabled = True
                autoGenerated = True
            }
        }
    }
    providerConfigCredentials: core.K8sObjectSecretWrapper {
        _targetK8sProviderConfigName = _controlPlaneK8sProviderConfigName
        _name = "${_name}-provider-config-credentials"
        _secretName = "${_name}-provider-config-credentials"
        _stringData = {
            value = """\
{
  "client_id":"admin-cli",
  "username": "admin",
  "password": "${_adminPassword}",
  "url": "https://${_domain}",
  "base_path": "/",
  "realm": "master"
}
"""
        }
        _targetNamespace = _tenantNamespace
        _uses = [
            repo.managedResource
            release.managedResource
        ]
    }
    providerConfig: core.KcProviderConfigWrapper {
        _name = "${_name}-kc-provider-config"
        _credentialsSecretName = providerConfigCredentials.managedResource.spec.forProvider.manifest.metadata.name
        _credentialsSecretNamespace = providerConfigCredentials.managedResource.spec.forProvider.manifest.metadata.namespace
        _uses = [
            providerConfigCredentials.managedResource
        ]
    }
    managedResources: [core.ManagedResource | core.KcProviderConfig] = [
        repo.managedResource
        release.managedResource
        providerConfigCredentials.managedResource
        providerConfig.managedResource
    ]

    usages: [core.Usage] = repo.usages + release.usages + providerConfigCredentials.usages + providerConfig.usages

