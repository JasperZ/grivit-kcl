import core.v1alpha1 as core

schema K8sAppOperationsKeycloak:
    _adminPassword: str
    _controlPlaneK8sProviderConfigName: str
    _domain: str
    _fluxHelmReleaseDependencies?: [core.K8sFluxHelmReleaseWrapper]
    _name: str
    _targetK8sProviderConfigWrapper: core.K8sProviderConfigWrapper
    _tenantNamespace: str

    repo: core.K8sFluxOciRepositoryWrapper {
        _name = "${_name}-repo"
        _url = "oci://registry-1.docker.io/bitnamicharts/keycloak"
        _tag = "24.2.2"
        _controlPlaneK8sProviderConfigName = _controlPlaneK8sProviderConfigName
        _tenantNamespace = _tenantNamespace
    }
    release: core.K8sFluxHelmOciReleaseWrapper {
        _name = "${_name}-rel"
        _helmChartName = "cilium"
        _helmReleaseName = "keycloak"
        _helmReleaseNamespace = "keycloak"
        _helmOciRepositoryWrapper = repo
        _helmReleaseWrapperDependencies = _fluxHelmReleaseDependencies
        _targetK8sProviderConfigWrapper = _targetK8sProviderConfigWrapper
        _controlPlaneK8sProviderConfigName = _controlPlaneK8sProviderConfigName
        _tenantNamespace = _tenantNamespace
        managedResource.spec.forProvider.manifest.spec.values = {
            auth = {
                adminUser = "admin"
                adminPassword = _adminPassword
            }
            production = True
            ingress = {
                enabled = True
                ingressClassName = "nginx"
                hostname = _domain
                annotations = {
                    "cert-manager.io/cluster-issuer" = "letsencrypt"
                }
                tls = True
            }
            tls = {
                enabled = True
                autoGenerated = True
            }
        }
        managedResource.spec.forProvider.manifest.spec.install.createNamespace = False
    }
    managedResources: [core.ManagedResource] = [
        repo.managedResource
        release.managedResource
    ]

    usages: [core.Usage] = repo.usages + release.usages

